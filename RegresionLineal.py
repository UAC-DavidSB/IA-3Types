# -*- coding: utf-8 -*-
"""IA-UI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JuHaWKsdd4TAwQuYc_qMZjlIcQkLFguV
"""

# -*- coding: utf-8 -*-
"""
RL_AutoMPG.py
Predicción de consumo de combustible (mpg) con Regresión Lineal
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
import warnings
warnings.filterwarnings('ignore')

print("🚗 Predicción de Consumo de Combustible (Auto MPG) con Regresión Lineal")
print("=" * 70)

# ======================================================
# 1. CARGAR EL DATASET
# ======================================================
try:
    df = pd.read_csv("auto-mpg.csv")  # Asegúrate de tenerlo en la carpeta
    print("✅ Dataset cargado correctamente")
except FileNotFoundError:
    raise FileNotFoundError("❌ No se encontró auto-mpg.csv. Sube el archivo al entorno.")

# ======================================================
# 2. EXPLORACIÓN INICIAL
# ======================================================
print(f"\n📋 Información inicial:")
print(f"   • Dimensiones: {df.shape}")
print(f"   • Columnas: {list(df.columns)}")

print("\nPrimeras 5 filas:")
print(df.head())

print("\nTipos de datos:")
print(df.dtypes)

print("\nValores nulos por columna:")
print(df.isnull().sum())

# ======================================================
# 3. LIMPIEZA DE DATOS
# ======================================================
# Eliminar columna "car name" si existe (texto irrelevante como ID)
if "car name" in df.columns:
    df.drop(columns=["car name"], inplace=True)
    print("\n🗑️ Columna 'car name' eliminada")

# Reemplazar valores faltantes en horsepower (en dataset original aparecen como '?')
if df['horsepower'].dtype == object:
    df['horsepower'] = pd.to_numeric(df['horsepower'], errors='coerce')

# Rellenar nulos con mediana
for col in df.columns:
    if df[col].dtype == "object":
        df[col].fillna(df[col].mode()[0], inplace=True)
    else:
        df[col].fillna(df[col].median(), inplace=True)

# ======================================================
# 4. CODIFICACIÓN DE VARIABLES CATEGÓRICAS
# ======================================================
print("\n🔢 Codificando variables categóricas...")
label_encoders = {}
for col in df.select_dtypes(include=["object"]).columns:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col].astype(str))
    label_encoders[col] = le
    print(f"   • {col}: {len(le.classes_)} categorías")

# ======================================================
# 5. DEFINIR TARGET Y SELECCIONAR FEATURES RELEVANTES
# ======================================================
target_column = "mpg"
print(f"\n🎯 Variable objetivo: {target_column}")

# Selección de features más correlacionadas con mpg
correlations = df.corr()[target_column].abs().sort_values(ascending=False)
top_features = correlations.index[1:8]  # Top 7 más correlacionadas
print("🔝 Variables más correlacionadas seleccionadas:", list(top_features))

X = df[top_features]
y = df[target_column]

# ======================================================
# 6. DIVISIÓN DE DATOS Y ESCALADO
# ======================================================
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# ======================================================
# 7. ENTRENAMIENTO DEL MODELO
# ======================================================
model = LinearRegression()
model.fit(X_train_scaled, y_train)
print("\n🤖 Modelo entrenado exitosamente!")

# ======================================================
# 8. PREDICCIONES Y MÉTRICAS
# ======================================================
y_train_pred = model.predict(X_train_scaled)
y_test_pred = model.predict(X_test_scaled)

train_mse = mean_squared_error(y_train, y_train_pred)
train_rmse = np.sqrt(train_mse)
train_mae = mean_absolute_error(y_train, y_train_pred)
train_r2 = r2_score(y_train, y_train_pred)

test_mse = mean_squared_error(y_test, y_test_pred)
test_rmse = np.sqrt(test_mse)
test_mae = mean_absolute_error(y_test, y_test_pred)
test_r2 = r2_score(y_test, y_test_pred)

print("\n📊 Evaluación del modelo:")
print(f"📈 Entrenamiento -> R²={train_r2:.3f}, RMSE={train_rmse:.3f}, MAE={train_mae:.3f}")
print(f"📊 Prueba        -> R²={test_r2:.3f}, RMSE={test_rmse:.3f}, MAE={test_mae:.3f}")

# ======================================================
# 9. VISUALIZACIÓN RESULTADOS
# ======================================================
plt.figure(figsize=(8,6))
plt.scatter(y_test, y_test_pred, alpha=0.6, color="blue")
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], "r--", lw=2)
plt.xlabel("Valores Reales (mpg)")
plt.ylabel("Predicciones (mpg)")
plt.title(f"Predicciones vs Reales (Prueba) | R² = {test_r2:.3f}")
plt.show()

# ======================================================
# 10. IMPORTANCIA DE FEATURES
# ======================================================
coef_df = pd.DataFrame({
    "Feature": top_features,
    "Coeficiente": model.coef_,
    "Importancia_Abs": np.abs(model.coef_)
}).sort_values("Importancia_Abs", ascending=False)

print("\n🎯 Importancia de características:")
print(coef_df.head(10))

plt.figure(figsize=(10,8))
sns.barplot(data=coef_df.head(10), x="Coeficiente", y="Feature", color="skyblue")
plt.title("Top Features más influyentes en el modelo (Auto MPG)")
plt.tight_layout()
plt.show()

# ======================================================
# 11. RESUMEN FINAL
# ======================================================
print("\n📋 RESUMEN FINAL:")
print(f"✅ Modelo entrenado con Regresión Lineal")
print(f"📊 R² Score en prueba: {test_r2:.3f} ({test_r2*100:.1f}% de varianza explicada)")
if test_r2 > 0.7:
    print("🎉 Excelente rendimiento")
elif test_r2 > 0.5:
    print("👍 Buen rendimiento")
else:
    print("⚠️ Rendimiento bajo, considera más features o modelo distinto")
